[
  {
    "Name": "webview_addjavascriptinterface.rb",
    "Title": "Android Browser and WebView addJavascriptInterface Code Execution",
    "Description": "This module exploits a privilege escalation issue in Android < 4.2's WebView component that arises when untrusted Javascript code is executed by a WebView that has one or more Interfaces added to it. The untrusted Javascript code can call into the Java Reflection APIs exposed by the Interface and execute arbitrary commands. Some distributions of the Android Browser app have an addJavascriptInterface call tacked on, and thus are vulnerable to RCE. The Browser app in the Google APIs 4.1.2 release of Android is known to be vulnerable. A secondary attack vector involves the WebViews embedded inside a large number of Android applications. Ad integrations are perhaps the worst offender here. If you can MITM the WebView's HTTP connection, or if you can get a persistent XSS into the page displayed in the WebView, then you can inject the html/js served by this module and get a shell. Note: Adding a .js to the URL will return plain javascript (no HTML markup).",
    "CveIDs": [
      "CVE-2012-6636",
      "CVE-2013-4710"
    ],
    "EdbIDs": [
      "EDB-31519"
    ],
    "References": [
      "http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-vulnerability/",
      "https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/",
      "http://50.56.33.56/blog/?p=314",
      "https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-code-execution/",
      "https://github.com/mwrlabs/drozer/blob/bcadf5c3fd08c4becf84ed34302a41d7b5e9db63/src/drozer/modules/exploit/mitm/addJavaScriptInterface.py"
    ]
  }
]
